{"created": 1739877269.9556012, "duration": 67.2341697216034, "exitcode": 0, "root": "D:\\Projects\\Advanced_telematics", "environment": {}, "summary": {"failed": 1, "passed": 1, "total": 2, "collected": 34}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": ".", "type": "Dir"}]}, {"nodeid": "1smoke_testcase/1Home/test_deviceinfo.py", "outcome": "passed", "result": [{"nodeid": "1smoke_testcase/1Home/test_deviceinfo.py::test_device_info", "type": "Function", "lineno": 11}]}, {"nodeid": "1smoke_testcase/1Home", "outcome": "passed", "result": [{"nodeid": "1smoke_testcase/1Home/test_deviceinfo.py", "type": "Module"}]}, {"nodeid": "1smoke_testcase/2Settings/test_1Add_Device.py", "outcome": "passed", "result": [{"nodeid": "1smoke_testcase/2Settings/test_1Add_Device.py::test_add_device", "type": "Function", "lineno": 11}]}, {"nodeid": "1smoke_testcase/2Settings/test_2notification.py", "outcome": "passed", "result": [{"nodeid": "1smoke_testcase/2Settings/test_2notification.py::test_add_notifications", "type": "Function", "lineno": 12}]}, {"nodeid": "1smoke_testcase/2Settings/test_3geofence.py", "outcome": "passed", "result": [{"nodeid": "1smoke_testcase/2Settings/test_3geofence.py::test_add_geofence", "type": "Function", "lineno": 12}]}, {"nodeid": "1smoke_testcase/2Settings/test_4drivers.py", "outcome": "passed", "result": [{"nodeid": "1smoke_testcase/2Settings/test_4drivers.py::test_add_driver", "type": "Function", "lineno": 13}]}, {"nodeid": "1smoke_testcase/2Settings/test_5Maintenance.py", "outcome": "passed", "result": [{"nodeid": "1smoke_testcase/2Settings/test_5Maintenance.py::test_add_maintenance", "type": "Function", "lineno": 9}]}, {"nodeid": "1smoke_testcase/2Settings", "outcome": "passed", "result": [{"nodeid": "1smoke_testcase/2Settings/test_1Add_Device.py", "type": "Module"}, {"nodeid": "1smoke_testcase/2Settings/test_2notification.py", "type": "Module"}, {"nodeid": "1smoke_testcase/2Settings/test_3geofence.py", "type": "Module"}, {"nodeid": "1smoke_testcase/2Settings/test_4drivers.py", "type": "Module"}, {"nodeid": "1smoke_testcase/2Settings/test_5Maintenance.py", "type": "Module"}]}, {"nodeid": "1smoke_testcase/3Reports/test_1route.py", "outcome": "passed", "result": [{"nodeid": "1smoke_testcase/3Reports/test_1route.py::test_route_report", "type": "Function", "lineno": 10}]}, {"nodeid": "1smoke_testcase/3Reports/test_2trip.py", "outcome": "passed", "result": [{"nodeid": "1smoke_testcase/3Reports/test_2trip.py::test_trip_report", "type": "Function", "lineno": 10}]}, {"nodeid": "1smoke_testcase/3Reports/test_3events.py", "outcome": "passed", "result": [{"nodeid": "1smoke_testcase/3Reports/test_3events.py::test_event_report", "type": "Function", "lineno": 10}]}, {"nodeid": "1smoke_testcase/3Reports/test_3summary.py", "outcome": "passed", "result": [{"nodeid": "1smoke_testcase/3Reports/test_3summary.py::test_summary_report", "type": "Function", "lineno": 10}]}, {"nodeid": "1smoke_testcase/3Reports", "outcome": "passed", "result": [{"nodeid": "1smoke_testcase/3Reports/test_1route.py", "type": "Module"}, {"nodeid": "1smoke_testcase/3Reports/test_2trip.py", "type": "Module"}, {"nodeid": "1smoke_testcase/3Reports/test_3events.py", "type": "Module"}, {"nodeid": "1smoke_testcase/3Reports/test_3summary.py", "type": "Module"}]}, {"nodeid": "1smoke_testcase/4Resellercompanylogin/test_resellercompany.py", "outcome": "passed", "result": [{"nodeid": "1smoke_testcase/4Resellercompanylogin/test_resellercompany.py::test_summary_report", "type": "Function", "lineno": 11}]}, {"nodeid": "1smoke_testcase/4Resellercompanylogin", "outcome": "passed", "result": [{"nodeid": "1smoke_testcase/4Resellercompanylogin/test_resellercompany.py", "type": "Module"}]}, {"nodeid": "1smoke_testcase/AllureReport", "outcome": "passed", "result": []}, {"nodeid": "1smoke_testcase/Results&Status", "outcome": "passed", "result": []}, {"nodeid": "1smoke_testcase/assets", "outcome": "passed", "result": []}, {"nodeid": "1smoke_testcase", "outcome": "passed", "result": [{"nodeid": "1smoke_testcase/1Home", "type": "Dir"}, {"nodeid": "1smoke_testcase/2Settings", "type": "Dir"}, {"nodeid": "1smoke_testcase/3Reports", "type": "Dir"}, {"nodeid": "1smoke_testcase/4Resellercompanylogin", "type": "Dir"}, {"nodeid": "1smoke_testcase/AllureReport", "type": "Dir"}, {"nodeid": "1smoke_testcase/Results&Status", "type": "Dir"}, {"nodeid": "1smoke_testcase/assets", "type": "Dir"}]}, {"nodeid": "Login_Reset/test_1Login_page.py", "outcome": "passed", "result": [{"nodeid": "Login_Reset/test_1Login_page.py::test_login_valid_credentials", "type": "Function", "lineno": 8}, {"nodeid": "Login_Reset/test_1Login_page.py::test_login_invalid_credentials", "type": "Function", "lineno": 26}]}, {"nodeid": "Login_Reset/test_2Reset_Password.py", "outcome": "passed", "result": [{"nodeid": "Login_Reset/test_2Reset_Password.py::test_reset_password1", "type": "Function", "lineno": 7}]}, {"nodeid": "Login_Reset/test_new.py", "outcome": "passed", "result": [{"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[1-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[2-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[3-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[4-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[5-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[6-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[7-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[8-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[9-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[10-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[11-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[12-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[13-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[14-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[15-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[16-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[17-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[18-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[19-20]", "type": "Function", "lineno": 9}, {"nodeid": "Login_Reset/test_new.py::test_Setup_Acc[20-20]", "type": "Function", "lineno": 9}]}, {"nodeid": "Login_Reset", "outcome": "passed", "result": [{"nodeid": "Login_Reset/test_1Login_page.py", "type": "Module"}, {"nodeid": "Login_Reset/test_2Reset_Password.py", "type": "Module"}, {"nodeid": "Login_Reset/test_new.py", "type": "Module"}]}, {"nodeid": ".", "outcome": "passed", "result": [{"nodeid": "1smoke_testcase", "type": "Dir"}, {"nodeid": "Login_Reset", "type": "Dir"}]}], "tests": [{"nodeid": "1smoke_testcase/1Home/test_deviceinfo.py::test_device_info", "lineno": 11, "outcome": "failed", "keywords": ["test_device_info", "allure_description", "pytestmark", "test_deviceinfo.py", "1Home", "1smoke_testcase", "Advanced_telematics", ""], "setup": {"duration": 0.00036719999843626283, "outcome": "passed"}, "call": {"duration": 37.56259599999976, "outcome": "failed", "crash": {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 232, "message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//button[text()='View All']\"}\n  (Session info: chrome=133.0.6943.99); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x009002D3+25139]\n\t(No symbol) [0x0088B284]\n\t(No symbol) [0x007604A3]\n\t(No symbol) [0x007A8338]\n\t(No symbol) [0x007A868B]\n\t(No symbol) [0x007F0F62]\n\t(No symbol) [0x007CCF84]\n\t(No symbol) [0x007EE6E1]\n\t(No symbol) [0x007CCD36]\n\t(No symbol) [0x0079BD29]\n\t(No symbol) [0x0079D064]\n\tGetHandleVerifier [0x00C0B193+3215603]\n\tGetHandleVerifier [0x00C2230A+3310186]\n\tGetHandleVerifier [0x00C1C522+3286146]\n\tGetHandleVerifier [0x00999CD0+654384]\n\t(No symbol) [0x0089460D]\n\t(No symbol) [0x008914F8]\n\t(No symbol) [0x00891697]\n\t(No symbol) [0x00883D70]\n\tBaseThreadInitThunk [0x762B5D49+25]\n\tRtlInitializeExceptionChain [0x77E9CDEB+107]\n\tRtlGetAppContainerNamedObjectPath [0x77E9CD71+561]"}, "traceback": [{"path": "1smoke_testcase\\1Home\\test_deviceinfo.py", "lineno": 32, "message": ""}, {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py", "lineno": 770, "message": "in find_element"}, {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py", "lineno": 384, "message": "in execute"}, {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 232, "message": "NoSuchElementException"}], "longrepr": "@allure.description(\"Verify Device Info page\")\n    def test_device_info():\n        chrome_options = Options()\n        chrome_options.debugger_address = \"localhost:9222\"\n        service = Service(ChromeDriverManager().install())\n        driver = webdriver.Chrome(service=service, options=chrome_options)\n        driver.implicitly_wait(10)\n        driver.maximize_window()\n        driver.get(\"https://login.advancedtelematics.co.uk\")\n        time.sleep(10)\n        driver.get_screenshot_as_png()\n        driver.find_element(By.XPATH, \"//span[text()='Stopped']\").click()  # Running [2] & Stopped [3]\n        time.sleep(2)\n        driver.find_element(By.XPATH, \"(//div[@tabindex='0'])[11]\").click()\n        time.sleep(3)\n        driver.find_element(By.XPATH, \"(//div[@role='button'])[12]\").click()\n        time.sleep(3)\n        driver.save_screenshot(\"../Results&Status/Deviceinfo.png\")\n        driver.find_element(By.XPATH, \"(//div[@role='button'])[13]\").click()\n        time.sleep(3)\n>       driver.find_element(By.XPATH, \"//button[text()='View All']\").click()\n\n1smoke_testcase\\1Home\\test_deviceinfo.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000195BC156E70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77E9CDEB+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E9CD71+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//button[text()='View All']\"}\nE         (Session info: chrome=133.0.6943.99); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x009002D3+25139]\nE       \t(No symbol) [0x0088B284]\nE       \t(No symbol) [0x007604A3]\nE       \t(No symbol) [0x007A8338]\nE       \t(No symbol) [0x007A868B]\nE       \t(No symbol) [0x007F0F62]\nE       \t(No symbol) [0x007CCF84]\nE       \t(No symbol) [0x007EE6E1]\nE       \t(No symbol) [0x007CCD36]\nE       \t(No symbol) [0x0079BD29]\nE       \t(No symbol) [0x0079D064]\nE       \tGetHandleVerifier [0x00C0B193+3215603]\nE       \tGetHandleVerifier [0x00C2230A+3310186]\nE       \tGetHandleVerifier [0x00C1C522+3286146]\nE       \tGetHandleVerifier [0x00999CD0+654384]\nE       \t(No symbol) [0x0089460D]\nE       \t(No symbol) [0x008914F8]\nE       \t(No symbol) [0x00891697]\nE       \t(No symbol) [0x00883D70]\nE       \tBaseThreadInitThunk [0x762B5D49+25]\nE       \tRtlInitializeExceptionChain [0x77E9CDEB+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E9CD71+561]\n\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException"}, "teardown": {"duration": 0.000827799998660339, "outcome": "passed"}}, {"nodeid": "1smoke_testcase/2Settings/test_1Add_Device.py::test_add_device", "lineno": 11, "outcome": "passed", "keywords": ["test_add_device", "allure_description", "pytestmark", "test_1Add_Device.py", "2Settings", "1smoke_testcase", "Advanced_telematics", ""], "setup": {"duration": 0.000865699999849312, "outcome": "passed"}}]}