{"created": 1739880947.0537012, "duration": 579.805819272995, "exitcode": 1, "root": "D:\\Projects\\Advanced_telematics\\1smoke_testcase", "environment": {}, "summary": {"passed": 8, "failed": 3, "total": 11, "collected": 11}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": ".", "type": "Dir"}]}, {"nodeid": "1Home/test_deviceinfo.py", "outcome": "passed", "result": [{"nodeid": "1Home/test_deviceinfo.py::test_device_info", "type": "Function", "lineno": 11}]}, {"nodeid": "1Home", "outcome": "passed", "result": [{"nodeid": "1Home/test_deviceinfo.py", "type": "Module"}]}, {"nodeid": "2Settings/test_1Add_Device.py", "outcome": "passed", "result": [{"nodeid": "2Settings/test_1Add_Device.py::test_add_device", "type": "Function", "lineno": 11}]}, {"nodeid": "2Settings/test_2notification.py", "outcome": "passed", "result": [{"nodeid": "2Settings/test_2notification.py::test_add_notifications", "type": "Function", "lineno": 12}]}, {"nodeid": "2Settings/test_3geofence.py", "outcome": "passed", "result": [{"nodeid": "2Settings/test_3geofence.py::test_add_geofence", "type": "Function", "lineno": 12}]}, {"nodeid": "2Settings/test_4drivers.py", "outcome": "passed", "result": [{"nodeid": "2Settings/test_4drivers.py::test_add_driver", "type": "Function", "lineno": 13}]}, {"nodeid": "2Settings/test_5Maintenance.py", "outcome": "passed", "result": [{"nodeid": "2Settings/test_5Maintenance.py::test_add_maintenance", "type": "Function", "lineno": 9}]}, {"nodeid": "2Settings", "outcome": "passed", "result": [{"nodeid": "2Settings/test_1Add_Device.py", "type": "Module"}, {"nodeid": "2Settings/test_2notification.py", "type": "Module"}, {"nodeid": "2Settings/test_3geofence.py", "type": "Module"}, {"nodeid": "2Settings/test_4drivers.py", "type": "Module"}, {"nodeid": "2Settings/test_5Maintenance.py", "type": "Module"}]}, {"nodeid": "3Reports/test_1route.py", "outcome": "passed", "result": [{"nodeid": "3Reports/test_1route.py::test_route_report", "type": "Function", "lineno": 10}]}, {"nodeid": "3Reports/test_2trip.py", "outcome": "passed", "result": [{"nodeid": "3Reports/test_2trip.py::test_trip_report", "type": "Function", "lineno": 10}]}, {"nodeid": "3Reports/test_3events.py", "outcome": "passed", "result": [{"nodeid": "3Reports/test_3events.py::test_event_report", "type": "Function", "lineno": 10}]}, {"nodeid": "3Reports/test_3summary.py", "outcome": "passed", "result": [{"nodeid": "3Reports/test_3summary.py::test_summary_report", "type": "Function", "lineno": 10}]}, {"nodeid": "3Reports", "outcome": "passed", "result": [{"nodeid": "3Reports/test_1route.py", "type": "Module"}, {"nodeid": "3Reports/test_2trip.py", "type": "Module"}, {"nodeid": "3Reports/test_3events.py", "type": "Module"}, {"nodeid": "3Reports/test_3summary.py", "type": "Module"}]}, {"nodeid": "4Resellercompanylogin/test_resellercompany.py", "outcome": "passed", "result": [{"nodeid": "4Resellercompanylogin/test_resellercompany.py::test_summary_report", "type": "Function", "lineno": 11}]}, {"nodeid": "4Resellercompanylogin", "outcome": "passed", "result": [{"nodeid": "4Resellercompanylogin/test_resellercompany.py", "type": "Module"}]}, {"nodeid": "AllureReport", "outcome": "passed", "result": []}, {"nodeid": "Results&Status", "outcome": "passed", "result": []}, {"nodeid": "assets", "outcome": "passed", "result": []}, {"nodeid": ".", "outcome": "passed", "result": [{"nodeid": "1Home", "type": "Dir"}, {"nodeid": "2Settings", "type": "Dir"}, {"nodeid": "3Reports", "type": "Dir"}, {"nodeid": "4Resellercompanylogin", "type": "Dir"}, {"nodeid": "AllureReport", "type": "Dir"}, {"nodeid": "Results&Status", "type": "Dir"}, {"nodeid": "assets", "type": "Dir"}]}], "tests": [{"nodeid": "1Home/test_deviceinfo.py::test_device_info", "lineno": 11, "outcome": "passed", "keywords": ["test_device_info", "allure_description", "pytestmark", "test_deviceinfo.py", "1Home", "1smoke_testcase", ""], "setup": {"duration": 0.00041190000001734006, "outcome": "passed"}, "call": {"duration": 30.811100099999976, "outcome": "passed", "stdout": "Device Info & Status card displayed\nURL of the page: https://login.advancedtelematics.co.uk/\n"}, "teardown": {"duration": 0.0006127999999989697, "outcome": "passed"}}, {"nodeid": "2Settings/test_1Add_Device.py::test_add_device", "lineno": 11, "outcome": "passed", "keywords": ["test_add_device", "allure_description", "pytestmark", "test_1Add_Device.py", "2Settings", "1smoke_testcase", ""], "setup": {"duration": 0.0006422999999813328, "outcome": "passed"}, "call": {"duration": 71.48699650000003, "outcome": "passed", "stdout": "URL of the page: https://login.advancedtelematics.co.uk/settings/inventoryDevice\nDevice added\nAdd/Delete Device Passed and Captured\n"}, "teardown": {"duration": 0.0006863000000976172, "outcome": "passed"}}, {"nodeid": "2Settings/test_2notification.py::test_add_notifications", "lineno": 12, "outcome": "passed", "keywords": ["test_add_notifications", "allure_description", "pytestmark", "test_2notification.py", "2Settings", "1smoke_testcase", ""], "setup": {"duration": 0.0009369000001697714, "outcome": "passed"}, "call": {"duration": 42.760847799999965, "outcome": "passed", "stdout": "Notification added\nAdd/Delete Notification Passed and Captured\nURL of the page: https://login.advancedtelematics.co.uk/settings/notifications\n"}, "teardown": {"duration": 0.0005123999999341322, "outcome": "passed"}}, {"nodeid": "2Settings/test_3geofence.py::test_add_geofence", "lineno": 12, "outcome": "passed", "keywords": ["test_add_geofence", "allure_description", "pytestmark", "test_3geofence.py", "2Settings", "1smoke_testcase", ""], "setup": {"duration": 0.0006334000001970708, "outcome": "passed"}, "call": {"duration": 68.64606679999997, "outcome": "passed", "stdout": "Add/Delete Geofence Passed and Captured\nURL of the page: https://login.advancedtelematics.co.uk/geofences\n"}, "teardown": {"duration": 0.0005509000000074593, "outcome": "passed"}}, {"nodeid": "2Settings/test_4drivers.py::test_add_driver", "lineno": 13, "outcome": "passed", "keywords": ["test_add_driver", "allure_description", "pytestmark", "test_4drivers.py", "2Settings", "1smoke_testcase", ""], "setup": {"duration": 0.0006396999999651598, "outcome": "passed"}, "call": {"duration": 34.07708509999998, "outcome": "passed", "stdout": "Add/Delete Driver Passed and Captured\nURL of the page: https://login.advancedtelematics.co.uk/settings/drivers\n"}, "teardown": {"duration": 0.0005885000000489526, "outcome": "passed"}}, {"nodeid": "2Settings/test_5Maintenance.py::test_add_maintenance", "lineno": 9, "outcome": "passed", "keywords": ["test_add_maintenance", "allure_description", "pytestmark", "test_5Maintenance.py", "2Settings", "1smoke_testcase", ""], "setup": {"duration": 0.0006548999999722582, "outcome": "passed"}, "call": {"duration": 38.069529299999886, "outcome": "passed", "stdout": "Add/Delete Maintenance Passed and Captured\nURL of the page: https://login.advancedtelematics.co.uk/settings/maintenances\n"}, "teardown": {"duration": 0.0006893000002037297, "outcome": "passed"}}, {"nodeid": "3Reports/test_1route.py::test_route_report", "lineno": 10, "outcome": "passed", "keywords": ["test_route_report", "allure_description", "pytestmark", "test_1route.py", "3Reports", "1smoke_testcase", ""], "setup": {"duration": 0.00045860000000175205, "outcome": "passed"}, "call": {"duration": 69.86864130000004, "outcome": "passed", "stdout": "URL of the page: https://login.advancedtelematics.co.uk/reports/route\nXlsx file downloaded\nXlsx file sent to Email\nPdf file sent to Email\nRoute_Report Passed and Captured\nURL of the page: https://login.advancedtelematics.co.uk/reports/route\n"}, "teardown": {"duration": 0.0005693000000519532, "outcome": "passed"}}, {"nodeid": "3Reports/test_2trip.py::test_trip_report", "lineno": 10, "outcome": "passed", "keywords": ["test_trip_report", "allure_description", "pytestmark", "test_2trip.py", "3Reports", "1smoke_testcase", ""], "setup": {"duration": 0.0006174999998620478, "outcome": "passed"}, "call": {"duration": 59.94270830000005, "outcome": "passed", "stdout": "Xlsx file downloaded\nPdf file downloaded\nTrip_Report Passed and Captured\nURL of the page: https://login.advancedtelematics.co.uk/reports/trip\n"}, "teardown": {"duration": 0.00026879999995799153, "outcome": "passed"}}, {"nodeid": "3Reports/test_3events.py::test_event_report", "lineno": 10, "outcome": "failed", "keywords": ["test_event_report", "allure_description", "pytestmark", "test_3events.py", "3Reports", "1smoke_testcase", ""], "setup": {"duration": 0.00031730000000607106, "outcome": "passed"}, "call": {"duration": 73.22436739999989, "outcome": "failed", "crash": {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 232, "message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButton-outlinedPrimary MuiButton-sizeSmall MuiButton-outlinedSizeSmall MuiButton-root MuiButton-outlined MuiButton-outlinedPrimary MuiButton-sizeSmall MuiButton-outlinedSizeSmall jss126 css-1k69mw7\" tabindex=\"0\" type=\"button\">...</button> is not clickable at point (1322, 125). Other element would receive the click: <div class=\"MuiDialog-container MuiDialog-scrollPaper css-ekeie0\" role=\"presentation\" tabindex=\"-1\" style=\"opacity: 0; transition: opacity 195ms cubic-bezier(0.4, 0, 0.2, 1);\">...</div>\n  (Session info: chrome=133.0.6943.99)\nStacktrace:\n\tGetHandleVerifier [0x009502D3+25139]\n\t(No symbol) [0x008DB284]\n\t(No symbol) [0x007B04A3]\n\t(No symbol) [0x007FE5D0]\n\t(No symbol) [0x007FC984]\n\t(No symbol) [0x007FA517]\n\t(No symbol) [0x007F97D4]\n\t(No symbol) [0x007EDE55]\n\t(No symbol) [0x0081CF3C]\n\t(No symbol) [0x007ED8E4]\n\t(No symbol) [0x0081D1B4]\n\t(No symbol) [0x0083E6E1]\n\t(No symbol) [0x0081CD36]\n\t(No symbol) [0x007EBD29]\n\t(No symbol) [0x007ED064]\n\tGetHandleVerifier [0x00C5B193+3215603]\n\tGetHandleVerifier [0x00C7230A+3310186]\n\tGetHandleVerifier [0x00C6C522+3286146]\n\tGetHandleVerifier [0x009E9CD0+654384]\n\t(No symbol) [0x008E460D]\n\t(No symbol) [0x008E14F8]\n\t(No symbol) [0x008E1697]\n\t(No symbol) [0x008D3D70]\n\tBaseThreadInitThunk [0x758F5D49+25]\n\tRtlInitializeExceptionChain [0x7727CDEB+107]\n\tRtlGetAppContainerNamedObjectPath [0x7727CD71+561]"}, "traceback": [{"path": "3Reports\\test_3events.py", "lineno": 63, "message": ""}, {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py", "lineno": 94, "message": "in click"}, {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py", "lineno": 395, "message": "in _execute"}, {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py", "lineno": 384, "message": "in execute"}, {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 232, "message": "ElementClickInterceptedException"}], "stdout": "Xlsx file downloaded\nPdf file downloaded\nXlsx file send to Email\n", "longrepr": "@allure.description(\"Verify the Events Report functionality, including XLSX and PDF downloads, Mail Report, Scheduled Report, and Show Report options.\")\n    def test_event_report():\n        chrome_options = Options()\n        chrome_options.debugger_address = \"localhost:9222\"\n        service = Service(ChromeDriverManager().install())\n        driver = webdriver.Chrome(service=service, options=chrome_options)\n        driver.implicitly_wait(10)\n        driver.maximize_window()\n        driver.get(\"https://login.advancedtelematics.co.uk/\")\n        time.sleep(10)\n        driver.find_element(\"xpath\", \"(//div[@role='button'])[3]\").click()  # reports\n        time.sleep(2)\n        driver.find_element(\"xpath\", \"(//a[@tabindex='0'])[4]\").click()  # events\n        time.sleep(5)\n        driver.find_element(\"xpath\", \"(//div[@role='combobox'])[1]\").click()\n        time.sleep(2)\n        driver.find_element(\"xpath\", \"//li[text()='Today']\").click()\n        # print(\"Title :\", driver.title)\n        driver.find_element(\"xpath\", \"(//input[@role='combobox'])\").click()\n        time.sleep(3)\n        driver.find_element(\"xpath\", \"(//input[@role='combobox'])\").send_keys(\"evd\")\n        time.sleep(2)\n        driver.find_element(\"xpath\", \"(//input[@role='combobox'])\").send_keys(Keys.ARROW_DOWN)\n        driver.find_element(\"xpath\", \"(//input[@role='combobox'])\").send_keys(Keys.ENTER)\n        time.sleep(3)\n        actions = ActionChains(driver)\n        demo1 = driver.find_element(By.XPATH, \"(//button[@type='button'])[7]\")\n        actions.click(demo1).perform()\n        time.sleep(8)\n        # Export\n        actions = ActionChains(driver)\n        demo = driver.find_element(By.XPATH, \"(//button[@type='button'])[8]\")\n        actions.click(demo).perform()\n        time.sleep(3)\n        driver.find_element(By.XPATH, \"(//li[@role='menuitem'])[1]\").click()\n        print(\"Xlsx file downloaded\")\n        time.sleep(2)\n        actions = ActionChains(driver)\n        demo = driver.find_element(By.XPATH, \"(//button[@type='button'])[8]\")\n        actions.click(demo).perform()\n        time.sleep(1)\n        driver.find_element(By.XPATH, \"(//li[@role='menuitem'])[2]\").click()\n        time.sleep(2)\n        print(\"Pdf file downloaded\")\n        time.sleep(2)\n        # Email report\n        driver.find_element(By.XPATH, \"(//button[@type='button'])[9]\").click()\n        time.sleep(1)\n        driver.find_element(By.XPATH, \"(//li[@role='menuitem'])[1]\").click()\n        time.sleep(2)\n        driver.find_element(By.XPATH, \"//button[text()='Send']\").click()\n        print(\"Xlsx file send to Email\")\n>       driver.find_element(By.XPATH, \"(//button[@type='button'])[9]\").click()\n\n3Reports\\test_3events.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024374B5F500>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7727CDEB+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7727CD71+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButton-outlinedPrimary MuiButton-sizeSmall MuiButton-outlinedSizeSmall MuiButton-root MuiButton-outlined MuiButton-outlinedPrimary MuiButton-sizeSmall MuiButton-outlinedSizeSmall jss126 css-1k69mw7\" tabindex=\"0\" type=\"button\">...</button> is not clickable at point (1322, 125). Other element would receive the click: <div class=\"MuiDialog-container MuiDialog-scrollPaper css-ekeie0\" role=\"presentation\" tabindex=\"-1\" style=\"opacity: 0; transition: opacity 195ms cubic-bezier(0.4, 0, 0.2, 1);\">...</div>\nE         (Session info: chrome=133.0.6943.99)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x009502D3+25139]\nE       \t(No symbol) [0x008DB284]\nE       \t(No symbol) [0x007B04A3]\nE       \t(No symbol) [0x007FE5D0]\nE       \t(No symbol) [0x007FC984]\nE       \t(No symbol) [0x007FA517]\nE       \t(No symbol) [0x007F97D4]\nE       \t(No symbol) [0x007EDE55]\nE       \t(No symbol) [0x0081CF3C]\nE       \t(No symbol) [0x007ED8E4]\nE       \t(No symbol) [0x0081D1B4]\nE       \t(No symbol) [0x0083E6E1]\nE       \t(No symbol) [0x0081CD36]\nE       \t(No symbol) [0x007EBD29]\nE       \t(No symbol) [0x007ED064]\nE       \tGetHandleVerifier [0x00C5B193+3215603]\nE       \tGetHandleVerifier [0x00C7230A+3310186]\nE       \tGetHandleVerifier [0x00C6C522+3286146]\nE       \tGetHandleVerifier [0x009E9CD0+654384]\nE       \t(No symbol) [0x008E460D]\nE       \t(No symbol) [0x008E14F8]\nE       \t(No symbol) [0x008E1697]\nE       \t(No symbol) [0x008D3D70]\nE       \tBaseThreadInitThunk [0x758F5D49+25]\nE       \tRtlInitializeExceptionChain [0x7727CDEB+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x7727CD71+561]\n\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "teardown": {"duration": 0.0002592999999251333, "outcome": "passed"}}, {"nodeid": "3Reports/test_3summary.py::test_summary_report", "lineno": 10, "outcome": "failed", "keywords": ["test_summary_report", "allure_description", "pytestmark", "test_3summary.py", "3Reports", "1smoke_testcase", ""], "setup": {"duration": 0.00024730000018280407, "outcome": "passed"}, "call": {"duration": 50.84925299999986, "outcome": "failed", "crash": {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 232, "message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButton-outlinedPrimary MuiButton-sizeSmall MuiButton-outlinedSizeSmall MuiButton-root MuiButton-outlined MuiButton-outlinedPrimary MuiButton-sizeSmall MuiButton-outlinedSizeSmall jss126 css-1k69mw7\" tabindex=\"0\" type=\"button\">...</button> is not clickable at point (1322, 130). Other element would receive the click: <div class=\"MuiDialog-container MuiDialog-scrollPaper css-ekeie0\" role=\"presentation\" tabindex=\"-1\" style=\"opacity: 0; transition: opacity 195ms cubic-bezier(0.4, 0, 0.2, 1);\">...</div>\n  (Session info: chrome=133.0.6943.99)\nStacktrace:\n\tGetHandleVerifier [0x009502D3+25139]\n\t(No symbol) [0x008DB284]\n\t(No symbol) [0x007B04A3]\n\t(No symbol) [0x007FE5D0]\n\t(No symbol) [0x007FC984]\n\t(No symbol) [0x007FA517]\n\t(No symbol) [0x007F97D4]\n\t(No symbol) [0x007EDE55]\n\t(No symbol) [0x0081CF3C]\n\t(No symbol) [0x007ED8E4]\n\t(No symbol) [0x0081D1B4]\n\t(No symbol) [0x0083E6E1]\n\t(No symbol) [0x0081CD36]\n\t(No symbol) [0x007EBD29]\n\t(No symbol) [0x007ED064]\n\tGetHandleVerifier [0x00C5B193+3215603]\n\tGetHandleVerifier [0x00C7230A+3310186]\n\tGetHandleVerifier [0x00C6C522+3286146]\n\tGetHandleVerifier [0x009E9CD0+654384]\n\t(No symbol) [0x008E460D]\n\t(No symbol) [0x008E14F8]\n\t(No symbol) [0x008E1697]\n\t(No symbol) [0x008D3D70]\n\tBaseThreadInitThunk [0x758F5D49+25]\n\tRtlInitializeExceptionChain [0x7727CDEB+107]\n\tRtlGetAppContainerNamedObjectPath [0x7727CD71+561]"}, "traceback": [{"path": "3Reports\\test_3summary.py", "lineno": 56, "message": ""}, {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py", "lineno": 94, "message": "in click"}, {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py", "lineno": 395, "message": "in _execute"}, {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py", "lineno": 384, "message": "in execute"}, {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 232, "message": "ElementClickInterceptedException"}], "stdout": "Title of the page: advanced telematics\nURL of the page: https://login.advancedtelematics.co.uk/reports/summary\nXlsx file downloaded\nXlsx file sent to Email\n", "longrepr": "@allure.description(\"Verify the Summary Report functionality, including XLSX and PDF downloads, Mail Report, Scheduled Report, and Show Report options.\")\n    def test_summary_report():\n        chrome_options = Options()\n        chrome_options.debugger_address = \"localhost:9222\"\n        service = Service(ChromeDriverManager().install())\n        driver = webdriver.Chrome(service=service, options=chrome_options)\n        driver.implicitly_wait(10)\n        driver.maximize_window()\n        driver.get(\"https://login.advancedtelematics.co.uk/\")\n        print(\"Title of the page:\", driver.title)\n        time.sleep(10)\n        driver.find_element(\"xpath\", \"(//div[@role='button'])[3]\").click()  # reports\n        time.sleep(2)\n        driver.find_element(\"xpath\", \"(//a[@tabindex='0'])[7]\").click()  # summary\n        time.sleep(5)\n        driver.find_element(\"xpath\", \"(//div[@role='combobox'])[2]\").click()\n        time.sleep(2)\n        driver.find_element(\"xpath\", \"//li[text()='Today']\").click()\n        driver.find_element(\"xpath\", \"(//input[@role='combobox'])\").click()\n        time.sleep(3)\n        driver.find_element(\"xpath\", \"(//input[@role='combobox'])\").send_keys(\"evd\")\n        time.sleep(2)\n        driver.find_element(\"xpath\", \"(//input[@role='combobox'])\").send_keys(Keys.ARROW_DOWN)\n        driver.find_element(\"xpath\", \"(//input[@role='combobox'])\").send_keys(Keys.ENTER)\n        time.sleep(1)\n        driver.find_element(By.XPATH, \"//span[text()='Show']\").click()\n        time.sleep(8)\n        print(\"URL of the page:\", driver.current_url)\n        # Export\n        driver.find_element(By.XPATH, \"//button[text()='Export']\").click()\n        time.sleep(2)\n        driver.find_element(By.XPATH, \"//li[text()='XLSX']\").click()\n        print(\"Xlsx file downloaded\")\n        time.sleep(2)\n        driver.find_element(By.XPATH, \"//button[text()='Export']\").click()\n        time.sleep(1)\n        driver.find_element(By.XPATH, \"//li[text()='PDF']\").click()\n        time.sleep(3)\n        # Email report\n        driver.find_element(By.XPATH, \"//button[text()='Email Report']\").click()\n        time.sleep(1)\n        driver.find_element(By.XPATH, \"//li[text()='XLSX']\").click()\n        time.sleep(2)\n        driver.find_element(By.XPATH, \"//button[text()='Send']\").click()\n        print(\"Xlsx file sent to Email\")\n>       driver.find_element(By.XPATH, \"//button[text()='Email Report']\").click()\n\n3Reports\\test_3summary.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000243764752B0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7727CDEB+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7727CD71+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButton-outlinedPrimary MuiButton-sizeSmall MuiButton-outlinedSizeSmall MuiButton-root MuiButton-outlined MuiButton-outlinedPrimary MuiButton-sizeSmall MuiButton-outlinedSizeSmall jss126 css-1k69mw7\" tabindex=\"0\" type=\"button\">...</button> is not clickable at point (1322, 130). Other element would receive the click: <div class=\"MuiDialog-container MuiDialog-scrollPaper css-ekeie0\" role=\"presentation\" tabindex=\"-1\" style=\"opacity: 0; transition: opacity 195ms cubic-bezier(0.4, 0, 0.2, 1);\">...</div>\nE         (Session info: chrome=133.0.6943.99)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x009502D3+25139]\nE       \t(No symbol) [0x008DB284]\nE       \t(No symbol) [0x007B04A3]\nE       \t(No symbol) [0x007FE5D0]\nE       \t(No symbol) [0x007FC984]\nE       \t(No symbol) [0x007FA517]\nE       \t(No symbol) [0x007F97D4]\nE       \t(No symbol) [0x007EDE55]\nE       \t(No symbol) [0x0081CF3C]\nE       \t(No symbol) [0x007ED8E4]\nE       \t(No symbol) [0x0081D1B4]\nE       \t(No symbol) [0x0083E6E1]\nE       \t(No symbol) [0x0081CD36]\nE       \t(No symbol) [0x007EBD29]\nE       \t(No symbol) [0x007ED064]\nE       \tGetHandleVerifier [0x00C5B193+3215603]\nE       \tGetHandleVerifier [0x00C7230A+3310186]\nE       \tGetHandleVerifier [0x00C6C522+3286146]\nE       \tGetHandleVerifier [0x009E9CD0+654384]\nE       \t(No symbol) [0x008E460D]\nE       \t(No symbol) [0x008E14F8]\nE       \t(No symbol) [0x008E1697]\nE       \t(No symbol) [0x008D3D70]\nE       \tBaseThreadInitThunk [0x758F5D49+25]\nE       \tRtlInitializeExceptionChain [0x7727CDEB+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x7727CD71+561]\n\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "teardown": {"duration": 0.0005235999999513297, "outcome": "passed"}}, {"nodeid": "4Resellercompanylogin/test_resellercompany.py::test_summary_report", "lineno": 11, "outcome": "failed", "keywords": ["test_summary_report", "allure_description", "pytestmark", "test_resellercompany.py", "4Resellercompanylogin", "1smoke_testcase", ""], "setup": {"duration": 0.0008101999999325926, "outcome": "passed"}, "call": {"duration": 37.21269089999987, "outcome": "failed", "crash": {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 232, "message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"(//a[@tabindex='0'])[8]\"}\n  (Session info: chrome=133.0.6943.99); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x009502D3+25139]\n\t(No symbol) [0x008DB284]\n\t(No symbol) [0x007B04A3]\n\t(No symbol) [0x007F8338]\n\t(No symbol) [0x007F868B]\n\t(No symbol) [0x00840F62]\n\t(No symbol) [0x0081CF84]\n\t(No symbol) [0x0083E6E1]\n\t(No symbol) [0x0081CD36]\n\t(No symbol) [0x007EBD29]\n\t(No symbol) [0x007ED064]\n\tGetHandleVerifier [0x00C5B193+3215603]\n\tGetHandleVerifier [0x00C7230A+3310186]\n\tGetHandleVerifier [0x00C6C522+3286146]\n\tGetHandleVerifier [0x009E9CD0+654384]\n\t(No symbol) [0x008E460D]\n\t(No symbol) [0x008E14F8]\n\t(No symbol) [0x008E1697]\n\t(No symbol) [0x008D3D70]\n\tBaseThreadInitThunk [0x758F5D49+25]\n\tRtlInitializeExceptionChain [0x7727CDEB+107]\n\tRtlGetAppContainerNamedObjectPath [0x7727CD71+561]"}, "traceback": [{"path": "4Resellercompanylogin\\test_resellercompany.py", "lineno": 25, "message": ""}, {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py", "lineno": 770, "message": "in find_element"}, {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py", "lineno": 384, "message": "in execute"}, {"path": "D:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py", "lineno": 232, "message": "NoSuchElementException"}], "longrepr": "@allure.description(\"Verify Login for Reseller and Company user\")\n    def test_summary_report():\n        chrome_options = Options()\n        chrome_options.debugger_address = \"localhost:9222\"\n        service = Service(ChromeDriverManager().install())\n        driver = webdriver.Chrome(service=service, options=chrome_options)\n        driver.implicitly_wait(10)\n        driver.maximize_window()\n        driver.get(\"https://login.advancedtelematics.co.uk\")\n        time.sleep(20)\n    \n        driver.find_element(\"xpath\", \"(//div[@role='button'])[8]\").click()\n        time.sleep(3)\n>       driver.find_element(By.XPATH, \"(//a[@tabindex='0'])[8]\").click()\n\n4Resellercompanylogin\\test_resellercompany.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024376475C70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7727CDEB+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7727CD71+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"(//a[@tabindex='0'])[8]\"}\nE         (Session info: chrome=133.0.6943.99); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x009502D3+25139]\nE       \t(No symbol) [0x008DB284]\nE       \t(No symbol) [0x007B04A3]\nE       \t(No symbol) [0x007F8338]\nE       \t(No symbol) [0x007F868B]\nE       \t(No symbol) [0x00840F62]\nE       \t(No symbol) [0x0081CF84]\nE       \t(No symbol) [0x0083E6E1]\nE       \t(No symbol) [0x0081CD36]\nE       \t(No symbol) [0x007EBD29]\nE       \t(No symbol) [0x007ED064]\nE       \tGetHandleVerifier [0x00C5B193+3215603]\nE       \tGetHandleVerifier [0x00C7230A+3310186]\nE       \tGetHandleVerifier [0x00C6C522+3286146]\nE       \tGetHandleVerifier [0x009E9CD0+654384]\nE       \t(No symbol) [0x008E460D]\nE       \t(No symbol) [0x008E14F8]\nE       \t(No symbol) [0x008E1697]\nE       \t(No symbol) [0x008D3D70]\nE       \tBaseThreadInitThunk [0x758F5D49+25]\nE       \tRtlInitializeExceptionChain [0x7727CDEB+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x7727CD71+561]\n\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException"}, "teardown": {"duration": 0.00033760000019356085, "outcome": "passed"}}]}