{"name": "test_route_report", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButton-outlinedPrimary MuiButton-sizeSmall MuiButton-outlinedSizeSmall Mui-disabled MuiButton-root MuiButton-outlined MuiButton-outlinedPrimary MuiButton-sizeSmall MuiButton-outlinedSizeSmall jss126 css-1k69mw7\" tabindex=\"-1\" type=\"button\" disabled=\"\">...</button> is not clickable at point (1036, 125). Other element would receive the click: <div class=\"jss74\">...</div>\n  (Session info: chrome=133.0.6943.98)\nStacktrace:\n\tGetHandleVerifier [0x008C02D3+25139]\n\t(No symbol) [0x0084B284]\n\t(No symbol) [0x007204A3]\n\t(No symbol) [0x0076E5D0]\n\t(No symbol) [0x0076C984]\n\t(No symbol) [0x0076A517]\n\t(No symbol) [0x007697D4]\n\t(No symbol) [0x0075DE55]\n\t(No symbol) [0x0078CF3C]\n\t(No symbol) [0x0075D8E4]\n\t(No symbol) [0x0078D1B4]\n\t(No symbol) [0x007AE6E1]\n\t(No symbol) [0x0078CD36]\n\t(No symbol) [0x0075BD29]\n\t(No symbol) [0x0075D064]\n\tGetHandleVerifier [0x00BCB193+3215603]\n\tGetHandleVerifier [0x00BE230A+3310186]\n\tGetHandleVerifier [0x00BDC522+3286146]\n\tGetHandleVerifier [0x00959CD0+654384]\n\t(No symbol) [0x0085460D]\n\t(No symbol) [0x008514F8]\n\t(No symbol) [0x00851697]\n\t(No symbol) [0x00843D70]\n\tBaseThreadInitThunk [0x76A35D49+25]\n\tRtlInitializeExceptionChain [0x7764CDEB+107]\n\tRtlGetAppContainerNamedObjectPath [0x7764CD71+561]", "trace": "@allure.description(\"Verify the Route Report functionality, including XLSX and PDF downloads, Mail Report, Scheduled Report, and Show Report options\")\n    def test_route_report():\n        chrome_options = Options()\n        chrome_options.debugger_address = \"localhost:9222\"\n        service = Service(ChromeDriverManager().install())\n        driver = webdriver.Chrome(service=service, options=chrome_options)\n        driver.implicitly_wait(10)\n        driver.maximize_window()\n        driver.get(\"https://login.advancedtelematics.co.uk/\")\n        time.sleep(10)\n    \n        driver.find_element(\"xpath\", \"(//div[@role='button'])[3]\").click()  # reports\n        time.sleep(2)\n        driver.find_element(\"xpath\", \"(//a[@tabindex='0'])[3]\").click()  # route\n        time.sleep(5)\n        driver.find_element(\"xpath\", \"(//div[@role='combobox'])[1]\").click()\n        time.sleep(2)\n        driver.find_element(\"xpath\", \"//li[text()='This Week']\").click()\n        driver.find_element(\"xpath\", \"(//input[@role='combobox'])\").click()\n        time.sleep(3)\n        driver.find_element(\"xpath\", \"(//input[@role='combobox'])\").send_keys(\"evd\")\n        time.sleep(2)\n        driver.find_element(\"xpath\", \"(//input[@role='combobox'])\").send_keys(Keys.ARROW_DOWN)\n        driver.find_element(\"xpath\", \"(//input[@role='combobox'])\").send_keys(Keys.ENTER)\n        time.sleep(3)\n        driver.find_element(By.XPATH, \"//span[text()='Show']\").click()\n        time.sleep(6)\n        print(\"URL of the page:\", driver.current_url)\n        # Export\n>       driver.find_element(By.XPATH, \"//button[text()='Export']\").click()\n\n3Reports\\test_1route.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C1706220F0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7764CDEB+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7764CD71+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButton-outlinedPrimary MuiButton-sizeSmall MuiButton-outlinedSizeSmall Mui-disabled MuiButton-root MuiButton-outlined MuiButton-outlinedPrimary MuiButton-sizeSmall MuiButton-outlinedSizeSmall jss126 css-1k69mw7\" tabindex=\"-1\" type=\"button\" disabled=\"\">...</button> is not clickable at point (1036, 125). Other element would receive the click: <div class=\"jss74\">...</div>\nE         (Session info: chrome=133.0.6943.98)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x008C02D3+25139]\nE       \t(No symbol) [0x0084B284]\nE       \t(No symbol) [0x007204A3]\nE       \t(No symbol) [0x0076E5D0]\nE       \t(No symbol) [0x0076C984]\nE       \t(No symbol) [0x0076A517]\nE       \t(No symbol) [0x007697D4]\nE       \t(No symbol) [0x0075DE55]\nE       \t(No symbol) [0x0078CF3C]\nE       \t(No symbol) [0x0075D8E4]\nE       \t(No symbol) [0x0078D1B4]\nE       \t(No symbol) [0x007AE6E1]\nE       \t(No symbol) [0x0078CD36]\nE       \t(No symbol) [0x0075BD29]\nE       \t(No symbol) [0x0075D064]\nE       \tGetHandleVerifier [0x00BCB193+3215603]\nE       \tGetHandleVerifier [0x00BE230A+3310186]\nE       \tGetHandleVerifier [0x00BDC522+3286146]\nE       \tGetHandleVerifier [0x00959CD0+654384]\nE       \t(No symbol) [0x0085460D]\nE       \t(No symbol) [0x008514F8]\nE       \t(No symbol) [0x00851697]\nE       \t(No symbol) [0x00843D70]\nE       \tBaseThreadInitThunk [0x76A35D49+25]\nE       \tRtlInitializeExceptionChain [0x7764CDEB+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x7764CD71+561]\n\nD:\\PycharmProjects\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "description": "Verify the Route Report functionality, including XLSX and PDF downloads, Mail Report, Scheduled Report, and Show Report options", "attachments": [{"name": "stdout", "source": "2973585f-400d-40c6-ba17-6196ef29d27e-attachment.txt", "type": "text/plain"}], "start": 1739444174312, "stop": 1739444216508, "uuid": "ba14c36f-8819-4639-aa1e-f67126495d5a", "historyId": "be13d8193d766dfbbf4beabb47eee9ec", "testCaseId": "be13d8193d766dfbbf4beabb47eee9ec", "fullName": "3Reports.test_1route#test_route_report", "labels": [{"name": "parentSuite", "value": "3Reports"}, {"name": "suite", "value": "test_1route"}, {"name": "host", "value": "Sumesh"}, {"name": "thread", "value": "2836-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "3Reports.test_1route"}]}